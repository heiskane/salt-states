#!/usr/bin/python3
import os, sys, argparse, hashlib, base64
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding

# Ugly as hell but created only to get a better
# understanding of CBC mode for AES

class EncyptionManager:
	def __init__(self, key):
		self.iv = os.urandom(16)
		# Use md5 hash of the "password" as the key
		self.key = hashlib.sha256(key.encode()).digest()
		aesContext = Cipher(algorithms.AES(self.key),
							modes.ECB(),
							backend=default_backend())
		self.encryptor = aesContext.encryptor()
		self.decryptor = aesContext.decryptor()
		self.padder = padding.PKCS7(128).padder()
		self.unpadder = padding.PKCS7(128).unpadder()

	def update_encryptor(self, plaintext):
		return self.encryptor.update(plaintext)

	def finalize_encryptor(self):
		return self.encryptor.finalize()

	def update_decryptor(self, ciphertext):
		return self.decryptor.update(ciphertext)

	def finalize_decryptor(self):
		return self.decryptor.finalize()

	def xorBytes(self, input1, input2):
		output = b''
		for i, j in zip(input1, input2):
			output += bytes([i ^ j])
		return output


def encrypt(message, iv):
	msg = manager.padder.update(message)
	msg += manager.padder.finalize()
	encrypted = b''
	for i in range(0, len(msg), 16):
		if i == 0:
			xored = manager.xorBytes(msg[i:i+16], iv)
			encrypted += manager.update_encryptor(xored)
		else:
			xored = manager.xorBytes(msg[i:i+16], encrypted[i-16:i])
			encrypted += manager.update_encryptor(xored)
	encrypted += manager.finalize_encryptor()
	# Add the IV to the encrypted text and b64 encode
	return base64.b64encode(manager.iv + encrypted)

def decrypt(msg):
	msg = base64.b64decode(msg)
	# Get the IV (First 16 bytes)
	iv = msg[:16]
	# Cut the IV out
	msg = msg[16:]
	decrypted = b''
	for i in range(0, len(msg), 16):
		if i == 0:
			decrypted = manager.update_decryptor(msg[i:i+16])
			decrypted = manager.xorBytes(decrypted[i:i+16], iv)
		else:
			test = manager.update_decryptor(msg[i:i+16])
			decrypted += manager.xorBytes(msg[i-16:i], test)
	unpadded = manager.unpadder.update(decrypted)
	unpadded += manager.unpadder.finalize()
	return unpadded


# https://www.programcreek.com/python/example/5080/argparse.FileType
def parse():

	parser = argparse.ArgumentParser(description='Encrypt a file with AES-CBC')

	parser.add_argument('-d', '--decrypt', action='store_true',
						default=False, help="Decrypt the file")
	parser.add_argument('-f', '--file', dest='in_file',
						nargs=1, type=argparse.FileType('rb'),
						default=sys.stdin,
						help='Choose an input file (Default: stdin)')
	parser.add_argument('-o', '--output', dest='out_file',
						nargs=1, type=argparse.FileType('wb'),
						default=sys.stdout,
						help='Choose an outfile (Default: stdout)')

	required = parser.add_argument_group('Required arguments')

	required.add_argument('-k', '--key', type=str, required=True,
						help="The key for encryption and decryption")

	return parser.parse_args()

args = parse()
#print(args)

manager = EncyptionManager(args.key)


# TODO make it work well with stdout and stdin
# TODO also put shit in a main function like a normal person ffs
if not args.decrypt:
	try:
		message = args.in_file[0].read()
	except TypeError:
		message = args.in_file.read().encode()
	encrypted = encrypt(message, manager.iv)
	try:
		args.out_file[0].write(encrypted)
	except TypeError:
		print(encrypted.decode(), file=args.out_file)
else:
	try:
		message = args.in_file[0].read()
	except TypeError:
		message = args.in_file.read().encode()
	# TODO do stuff when decryption fails instead of exploding
	# raise argparse.ArgumentTypeError(' (: ')
	decrypted = decrypt(message)
	#print(decrypted, file=args.out_file[0])
	try:
		args.out_file[0].write(decrypted)
		#print("fuck my life")
	except TypeError:
		print(decrypted.decode(), file=args.out_file)
